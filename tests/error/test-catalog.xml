<test-catalog xmlns="https://github.com/invisibleXML/ixml/test-catalog"
	      release-date="2022-06-01"
	      name="Error tests">

  <description>
    <p>Tests intended to demonstrate errors that processors are required
    to raise.</p>
  </description>

  <test-set name="syntax-xml-name">
    <created by="ndw" on="2022-02-19"/>
    <modified by="MSM" on="2022-06-01"
	      change="Uncomment this test, expect dynamic error"/>
    
    <description>
      <p>This falls into the class "can't be serialized" I
      think.</p>
      <p>So:  assert-dynamic-error.</p>
    </description>
    <description>      
      <p>No grammar-test for this one, because different
      results are possible:  a processor is allowed but not
      required to detect the problem statically.</p>
    </description>

    <ixml-grammar>ª: 'a' .</ixml-grammar>

    <test-case name="invalid-name">
      <test-string>a</test-string>
      <result><assert-dynamic-error error-code="D01 D03"/></result>
    </test-case>
  </test-set>

  <test-set name="hex-much-too-big">
    <created by="ndw" on="2022-02-19"/>
    <description>
      <p>The number is so large it’s like to exceed the processor’s
      ability to represent it.</p>
    </description>
    <ixml-grammar>s: #decafbadbadbadbad .</ixml-grammar>
    <grammar-test>
      <result>
	<assert-not-a-grammar error-code="S07"/>
      </result>
    </grammar-test>
    <!-- Since there is no grammar here, it's not really necessary
	 to have a text case.  But hey, ... -->
    <test-case name="hex-much-too-big">
      <test-string/>
      <result><assert-not-a-grammar error-code="S07"/></result>
    </test-case>
  </test-set>    

  <test-set name="hex-too-big">
    <created by="ndw" on="2022-02-19"/>
    <description>
      <p>Exceeds the range of Unicode.</p>
    </description>
    <ixml-grammar>s: #ffffffff0 .</ixml-grammar>
    <grammar-test>
      <result>
	<assert-not-a-grammar error-code="S07"/>
      </result>
    </grammar-test>
    <test-case name="hex-too-big">
      <test-string>42</test-string>
      <result><assert-not-a-grammar error-code="S07"/></result>
    </test-case>
  </test-set>    

  <test-set name="hex-not-a-character">
    <created by="ndw" on="2022-02-19"/>
    <description>
      <p>Not a Unicode character.</p>
    </description>
    <ixml-grammar>s: #fffe .</ixml-grammar>
    <grammar-test>
      <result>
	<assert-not-a-grammar error-code="S08"/>
      </result>
    </grammar-test>
    <test-case name="hex-not-a-character">
      <test-string>65534</test-string>
      <result><assert-not-a-grammar error-code="S08"/></result>
    </test-case>
  </test-set>    

  <test-set name="hex-also-not-a-character">
    <created by="ndw" on="2022-02-19"/>
    <description>
      <p>Also not a Unicode character.</p>
    </description>
    <ixml-grammar>s: #1fffe .</ixml-grammar>
    <grammar-test>
      <result>
	<assert-not-a-grammar error-code="S08"/>
      </result>
    </grammar-test>
    <test-case name="hex-also-not-a-character">
      <test-string/>
      <result><assert-not-a-grammar error-code="S08"/></result>
    </test-case>
  </test-set>    

  <test-set name="hex-surrogate">
    <created by="ndw" on="2022-02-19"/>
    <description>
      <p>A Unicode surrogate.</p>
    </description>
    <ixml-grammar>s: #d801 .</ixml-grammar>
    <grammar-test>
      <result>
	<assert-not-a-grammar error-code="S08"/>
      </result>
    </grammar-test>
    <test-case name="hex-surrogate">
      <test-string/>
      <result><assert-not-a-grammar error-code="S08"/></result>
    </test-case>
  </test-set>    

  <test-set name="bad-class">
    <created by="ndw" on="2022-02-19"/>
    <description>
      <p>An invalid Unicode character class.</p>
    </description>
    <ixml-grammar>s: [Xq] .</ixml-grammar>
    <grammar-test>
      <result>
	<assert-not-a-grammar error-code="S10"/>
      </result>
    </grammar-test>
    <test-case name="bad-class">
      <test-string>x</test-string>
      <result><assert-not-a-grammar error-code="S10"/></result>
    </test-case>
  </test-set>    

  <test-set name="invalid-range">
    <created by="ndw" on="2022-02-19"/>
    <description>
      <p>An invalid range.</p>
    </description>
    <ixml-grammar>s: ['Z'-'A'] .</ixml-grammar>
    <grammar-test>
      <result>
	<assert-not-a-grammar error-code="S09"/>
      </result>
    </grammar-test>
    <test-case name="invalid-range-A">
      <test-string>A</test-string>
      <result><assert-not-a-grammar error-code="S09"/></result>
    </test-case>
    <test-case name="invalid-range-Z">
      <test-string>Z</test-string>
      <result><assert-not-a-grammar error-code="S09"/></result>
    </test-case>
    <test-case name="invalid-range-L">
      <test-string>L</test-string>
      <result><assert-not-a-grammar error-code="S09"/></result>
    </test-case>
  </test-set>

  <test-set name="invalid-char">
    <created by="NDW" on="2022-06-02"/>
    <ixml-grammar-ref href="invalid-char.ixml"/>
    <test-case name="invalid-char">
      <created by="NDW" on="2022-06-02"/>
      <test-string>a</test-string>
      <description>
        <p>Attempts to serialize an invalid XML character.</p>
      </description>
      <result>
        <assert-dynamic-error error-code="D04 D01"/>
      </result>
    </test-case>
  </test-set>

  <test-set name="attribute-root">
    <created by="MSM" on="2022-06-03"/>
    <description><p>This grammar marks its root (and only) node as an
    attribute; its single sentence thus cannot be serialized as
    well-formed XML.</p></description>
    <ixml-grammar>
      @S: 'This sentence cannot be serialized.'. 
    </ixml-grammar>
    <!--* no grammar test, since some processors may detect
	* the error statically. *-->
    <!--
    <grammar-test>
      <result><assert-xml>
	<ixml xmlns=""
	  ><rule name="S" mark="@"
	    ><literal string="This sentence cannot be serialized."
	    /></rule
	  ></ixml>
      </assert-xml></result>     
    </grammar-test>
    -->
    <test-case name="sentence">
      <description><p>This input is grammatical.  It just
      cannot be serialized.</p></description>
      <test-string>This sentence cannot be serialized.</test-string>
      <result><assert-dynamic-error error-code="D05 D01"/></result>
    </test-case> 
  </test-set>

  <test-set name="attribute-roots-plural">
    <created by="MSM" on="2022-06-03"/>
    <description><p>This grammar marks its start symbol as hidden;
    when that symbol has multiple children marked as attributes, the
    sentence cannot be serialized as well-formed
    XML.</p></description>
    <ixml-grammar>
      -S: a, b, c, d.
      @a: 'able'.
      @b: 'baker'.
      @c: 'charlie'.
      d: 'dog'.
    </ixml-grammar>
    <!--* no grammar test, since some processors may detect
	* the error statically. *-->
    <test-case name="wb-not-wf">
      <description><p>This input is grammatical but cannot be
      serialized.</p></description>
      <test-string>ablebakercharliedog</test-string>
      <result><assert-dynamic-error error-code="D05 D01"/></result>
    </test-case> 
  </test-set>

  <test-set name="well-balanced-xml">
    <created by="MSM" on="2022-06-03"/>
    <description><p>This grammar marks its start symbol as hidden;
    when that symbol has multiple children, the sentence cannot be
    serialized as well-formed XML.</p></description>
    <ixml-grammar>
      -S: a, b, c, d.
      a: 'able'.
      b: 'baker'.
      c: 'charlie'.
      d: 'dog'.
    </ixml-grammar>
    <!--* no grammar test, since some processors may detect
	* the error statically. *-->
    <test-case name="wb-not-wf">
      <description><p>This input is grammatical but cannot be
      serialized.</p></description>
      <test-string>ablebakercharliedog</test-string>
      <result><assert-dynamic-error error-code="D06 D01"/></result>
    </test-case> 
  </test-set>

  <test-set name="rootless">
    <created by="MSM" on="2022-06-03"/>
    <description><p>This grammar marks all its nonterminal symbols as
    hidden; since there is no outermost element, the parse tree cannot
    be serialized as well-formed XML.</p></description>
    <ixml-grammar>
      -S: a, b, c, d.
      -a: 'able'.
      -b: 'baker'.
      -c: 'charlie'.
      -d: 'dog'.
    </ixml-grammar>
    <!--* no grammar test, since some processors may detect
	* the error statically. *-->
    <test-case name="textnode-at-root">
      <description><p>This input is grammatical but cannot be
      serialized.</p></description>
      <test-string>ablebakercharliedog</test-string>
      <result><assert-dynamic-error error-code="D06 D01"/></result>
    </test-case> 
  </test-set>

  <test-set name="name-starting-xml">
    <created by="MSM" on="2022-06-03"/>
    <description><p>This grammar includes an attempt to create
    an attribute named 'xmlns', but that name is reserved.
    </p></description>
    <ixml-grammar>
      S: xmlns, able, baker.
      @xmlns: +'http://example.com/this-does-not-work'.
      able: 'a'*.
      baker: 'B'?.
    </ixml-grammar>
    <!--* no grammar test, since some processors may detect
	* the error statically. *-->
    <test-case name="wb-not-wf">
      <description><p>This input is grammatical but cannot be
      serialized.  'xmlns' is not allowed as the name of an
      attribute.</p></description>
      <test-string>aB</test-string>
      <result><assert-dynamic-error error-code="D07 D01"/></result>
    </test-case> 
  </test-set>    

</test-catalog>
