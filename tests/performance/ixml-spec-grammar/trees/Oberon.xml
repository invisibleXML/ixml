<?xml version="1.0" encoding="utf-8"?><ixml><comment> Syntax for the programming language Oberon.

  This ixml grammar was derived from Niklaus Wirth's 
  syntax description for Oberon, mostly automatically but
  partly by hand.  

  Manual changes made in Oberon.1.ixml:

  - Case inconsistencies in the original have been repaired
    (hexDigit/hexdigit, Case/case).
  - FieldList has been changed to allow a field list to be empty.
    This follows the grammar of 1996 and allows the last field list in 
    a record type to be followed by a semicolon, which matches the 
    practice in the source code for the compiler.  The grammar of 
    2013 requires a field list to be non-empty, which has the effect
    of making a semicolon before the final END of a record definition
    into a syntactic error.  
  - Definitions have been supplied for character and letter.
  - The definition of string has been changed to specify double not
    single quotes, to match what is actually present in the 
    source code.
  - Literals used with multiple meanings have been distinguished
    (MUL/STAR, EQUALS/EQL).
  - For literals used as operators or which are otherwise semantically
    required, their nonterminals have been marked non-hidden
    (though the actual literal is still suppressed).  (So in 
    "1+2" the output will have an empty 'PLUS' element.)
  - The rules for digit and hexDigit have been reformulated.
  - The rules for real and ScaleFactor have been adjusted to 
    remove the automatically added references to 's'.

  Further changes made in this version:

  - In IfStatement, CaseStatement, WhileStatement, and
    RepeatStatement, some occurrences of 'expression' and
    'StatementSequence' have been replaced by the new nonterminals
    'Condition', 'Then-Statements', and 'Else-Statements' to make the
    abstract structure clearer in the XML (although it remains
    dependent on the sequence of elements).

  - Names have been given to make it simpler to distinguish the
    different kinds of qualifiers (field-references, array subscripts,
    type guards, and pointer dereferencing).

  - The rules for ident, integer, real, and string have been adjusted
    to ensure that comments following these tokens appear outside, not
    inside, the corresponding element.  (References to ident have been
    replaced by references to _ident_, which is defined as ident
    followed by whitespace, and similarly for integer and string; real
    is simpler.)

  - To make the XML lighterweight, the output tree has been thinned.

    Nonterminals which always have exactly one child have been hidden
    unless their name conveys useful information not conveyed by the
    child or an ancestor.  (So &lt;number&gt;&lt;integer&gt;42&lt;/integer&gt;&lt;number&gt;
    becomes &lt;integer&gt;42&lt;/integer&gt;.)

    The expression subgrammar has been modified so that most 
    elements are used as containers only if they have more than one
    child.  So a number may be represented as &lt;integer&gt;42&lt;/integer&gt;
    and not as &lt;expression&gt;&lt;SimpleExpression&gt;&lt;term&gt;&lt;factor&gt;&lt;number&gt;
    &lt;integer&gt;42&lt;/integer&gt;&lt;/number&gt;&lt;/factor&gt;&lt;/term&gt;&lt;/SimpleExpression&gt;
    &lt;/expression&gt;.  As with the preceding item, this involves making
    new nonterminals by adding _ at the beginning and end of the 
    base name.    

  - The rule for designator has been revised to eliminate ambiguity.

    As written, it allows a qualified identifer (e.g. A or A.B) to be
    followed optionally by one or more selector (such as .C), so that
    A.B can be either a qualified identifier with no selectors (then A
    is a module name and B an identifier in that module) or a simple
    identifier followed by a field reference.  The ambiguity is
    resolved in practice by looking up the identifiers involved to see
    if they are the names of imported modules or fields.

    To eliminate the ambiguity, designator has been rewritten to allow
    either a double identifier followed optionally by selectors, or a
    single identifier also followed optionally by selectors, with the
    proviso that the first selector must not be a field reference.

  - The rule for selector has also been revised to eliminate an
    ambiguity between type guards and actual parameters on procedure
    calls.  To eliminate the ambiguity, type guards are assumed to
    apply to an immediately following field reference or dereference,
    and the change is to require that a type guard in fact be followed
    by a further selector.  This is at least consistent with the
    examples of type guards given in the documentation.

  - The rule for factor has been revised to eliminate the references to
    the keywords NIL, TRUE, and FALSE.  In a system with no upstream
    lexer, these references make the grammar ambiguous, since each of
    these keywords also matches the rule for identifiers.  The problem
    does not arise for other keywords.
 
  - To eliminate an ambiguity in the sample source code, whitespace is
    required after the keywords IN and IS, regardless of whether the
    next token begins with a letter or digit or not.  The same
    treatment could be applied to other keywords, but has not proven
    necessary for the input given here.

  - Some expressions have been rewritten into more compact forms.  For
    example:

       E, E* =&gt; E+
       E, (S, E)* =&gt; E ++ S
       (E, (S, E)*)? =&gt; E ** S

  - Some nonterminals have been marked as attributes; in some cases
    new rules have been introduced to provide more informative
    attribute names.

</comment><rule name="module"><alt><option><nonterminal name="s"/></option><nonterminal name="MODULE"/><nonterminal mark="@" name="name"/><nonterminal name="SEMI"/><option><nonterminal name="ImportList"/></option><nonterminal name="DeclarationSequence"/><option><alts><alt><nonterminal name="BEGIN"/><nonterminal name="StatementSequence"/></alt></alts></option><nonterminal name="END_MODULE"/></alt></rule><rule name="END_MODULE"><alt><nonterminal name="END"/><nonterminal mark="@" name="name"/><nonterminal name="DOT"/></alt></rule><rule mark="@" name="name"><alt><nonterminal name="_ident_"/></alt></rule><rule mark="-" name="digit"><alt><inclusion><member from="0" to="9"/></inclusion></alt></rule><rule mark="-" name="hexDigit"><alt><nonterminal mark="-" name="digit"/></alt><alt><inclusion><member from="A" to="F"/></inclusion></alt></rule><rule name="ident"><alt><nonterminal mark="-" name="letter"/><repeat0><alts><alt><nonterminal mark="-" name="letter"/></alt><alt><nonterminal mark="-" name="digit"/></alt></alts></repeat0></alt></rule><rule mark="-" name="_ident_"><alt><nonterminal name="ident"/><option><nonterminal name="s"/></option></alt></rule><comment> qualident = (_ident_, DOT)?, _ident_. </comment><rule name="qualident"><alt><option><alts><alt><nonterminal name="qualifier"/><nonterminal name="DOT"/></alt></alts></option><nonterminal mark="@" name="ident"/><option><nonterminal name="s"/></option></alt></rule><rule mark="@" name="qualifier"><alt><nonterminal name="_ident_"/></alt></rule><comment> identdef = _ident_, STAR?. </comment><rule name="identdef"><alt><nonterminal mark="@" name="ident"/><option><nonterminal name="s"/></option><option><nonterminal mark="@" name="visible"/></option></alt></rule><rule mark="@" name="visible"><alt><nonterminal mark="-" name="STAR"/></alt></rule><rule name="integer"><alt><repeat1><nonterminal mark="-" name="digit"/></repeat1></alt><alt><nonterminal mark="-" name="digit"/><repeat0><nonterminal name="hexDigit"/></repeat0><literal string="H"/></alt></rule><rule mark="-" name="_integer_"><alt><nonterminal name="integer"/><option><nonterminal name="s"/></option></alt></rule><rule name="real"><alt><repeat1><nonterminal mark="-" name="digit"/></repeat1><literal string="."/><repeat0><nonterminal mark="-" name="digit"/></repeat0><option><nonterminal name="ScaleFactor"/></option></alt></rule><rule name="ScaleFactor"><alt><inclusion><member string="ED"/></inclusion><option><inclusion><member string="+-"/></inclusion></option><repeat1><nonterminal mark="-" name="digit"/></repeat1></alt></rule><rule mark="-" name="number"><alt><nonterminal name="_integer_"/></alt><alt><nonterminal name="real"/><option><nonterminal name="s"/></option></alt></rule><rule name="string"><alt><literal tmark="-" string="&quot;"/><repeat0><nonterminal mark="-" name="character"/></repeat0><literal tmark="-" string="&quot;"/></alt></rule><rule mark="-" name="_string_"><alt><nonterminal name="string"/><option><nonterminal name="s"/></option></alt><alt><nonterminal name="CharConstant"/><option><nonterminal name="s"/></option></alt></rule><rule name="CharConstant"><alt><nonterminal mark="-" name="digit"/><repeat0><nonterminal mark="-" name="hexDigit"/></repeat0><nonterminal name="HEXMARK"/></alt></rule><rule name="ConstDeclaration"><alt><nonterminal name="identdef"/><nonterminal name="EQUALS"/><nonterminal name="ConstExpression"/></alt></rule><rule mark="-" name="ConstExpression"><alt><nonterminal name="_expression_"/></alt></rule><rule name="TypeDeclaration"><alt><nonterminal name="identdef"/><nonterminal name="EQUALS"/><nonterminal name="StrucType"/></alt></rule><rule name="StrucType"><alt><nonterminal name="ArrayType"/></alt><alt><nonterminal name="RecordType"/></alt><alt><nonterminal name="PointerType"/></alt><alt><nonterminal name="ProcedureType"/></alt></rule><rule name="type"><alt><nonterminal name="qualident"/></alt><alt><nonterminal name="StrucType"/></alt></rule><rule name="ArrayType"><alt><nonterminal name="ARRAY"/><repeat1><nonterminal name="length"/><sep><nonterminal name="COMMA"/></sep></repeat1><nonterminal name="OF"/><nonterminal name="type"/></alt></rule><rule name="length"><alt><nonterminal name="ConstExpression"/></alt></rule><rule name="RecordType"><alt><nonterminal name="RECORD"/><option><alts><alt><nonterminal name="LPAR"/><nonterminal name="BaseType"/><nonterminal name="RPAR"/></alt></alts></option><option><nonterminal name="FieldListSequence"/></option><nonterminal name="END"/></alt></rule><rule name="BaseType"><alt><nonterminal name="qualident"/></alt></rule><rule name="FieldListSequence"><alt><repeat1><nonterminal name="FieldList"/><sep><nonterminal name="SEMI"/></sep></repeat1></alt></rule><rule name="FieldList"><alt><option><alts><alt><nonterminal name="IdentList"/><nonterminal name="COLON"/><nonterminal name="type"/></alt></alts></option></alt></rule><rule name="IdentList"><alt><repeat1><nonterminal name="identdef"/><sep><nonterminal name="COMMA"/></sep></repeat1></alt></rule><rule name="PointerType"><alt><nonterminal name="POINTER"/><nonterminal name="TO"/><nonterminal name="type"/></alt></rule><rule name="ProcedureType"><alt><nonterminal name="PROCEDURE"/><option><nonterminal name="FormalParameters"/></option></alt></rule><rule name="VariableDeclaration"><alt><nonterminal name="IdentList"/><nonterminal name="COLON"/><nonterminal name="type"/></alt></rule><rule mark="-" name="_expression_"><alt><nonterminal name="expression"/></alt><alt><nonterminal name="_SimpleExpression_"/></alt></rule><rule name="expression"><alt><nonterminal name="_SimpleExpression_"/><nonterminal name="relation"/><nonterminal name="_SimpleExpression_"/></alt></rule><rule mark="-" name="relation"><alt><nonterminal name="EQL"/></alt><alt><nonterminal name="NEQ"/></alt><alt><nonterminal name="LSS"/></alt><alt><nonterminal name="LEQ"/></alt><alt><nonterminal name="GTR"/></alt><alt><nonterminal name="GEQ"/></alt><alt><nonterminal name="IN"/></alt><alt><nonterminal name="IS"/></alt></rule><rule mark="-" name="_SimpleExpression_"><alt><nonterminal name="SimpleExpression"/></alt><alt><nonterminal name="_term_"/></alt></rule><rule name="SimpleExpression"><alt><alts><alt><nonterminal name="PLUS"/></alt><alt><nonterminal name="MINUS"/></alt></alts><nonterminal name="_term_"/></alt><alt><option><alts><alt><nonterminal name="PLUS"/></alt><alt><nonterminal name="MINUS"/></alt></alts></option><nonterminal name="_term_"/><repeat1><alts><alt><nonterminal name="AddOperator"/><nonterminal name="_term_"/></alt></alts></repeat1></alt></rule><rule mark="-" name="AddOperator"><alt><nonterminal name="PLUS"/></alt><alt><nonterminal name="MINUS"/></alt><alt><nonterminal name="OR"/></alt></rule><rule mark="-" name="_term_"><alt><nonterminal name="term"/></alt><alt><nonterminal name="_factor_"/></alt></rule><rule name="term"><alt><nonterminal name="_factor_"/><repeat1><alts><alt><nonterminal name="MulOperator"/><nonterminal name="_factor_"/></alt></alts></repeat1></alt></rule><rule mark="-" name="MulOperator"><alt><nonterminal name="MUL"/></alt><alt><nonterminal name="SLASH"/></alt><alt><nonterminal name="DIV"/></alt><alt><nonterminal name="MOD"/></alt><alt><nonterminal name="AND"/></alt></rule><rule mark="-" name="_factor_"><alt><nonterminal name="factor"/></alt><alt><nonterminal name="number"/></alt><alt><nonterminal name="_string_"><comment> | NIL | TRUE | FALSE </comment><comment> parse these keywords as identifiers </comment></nonterminal></alt><alt><nonterminal name="set"/></alt><alt><nonterminal name="designator"/></alt><alt><nonterminal name="LPAR"/><nonterminal name="_expression_"/><nonterminal name="RPAR"/></alt></rule><rule name="factor"><alt><nonterminal name="designator"/><nonterminal name="ActualParameters"/></alt><alt><nonterminal name="NEGATION"/><nonterminal mark="-" name="_factor_"/></alt></rule><comment> designator = qualident, (selector)*. </comment><rule name="designator"><alt><nonterminal name="double-ident"/><repeat0><nonterminal name="selector"/></repeat0></alt><alt><nonterminal name="single-ident"/><option><alts><alt><nonterminal name="non-field-selector"/><repeat0><nonterminal name="selector"/></repeat0></alt></alts></option></alt></rule><comment> If the designator begins with a single identifier A optionally
         followed by a subscript, a typeguard, or a dereference 
         operator, then A is unambiguously an unqualified identifier.  
         If the designator starts with a form like A.B, then either B
         is an identifier qualified by A (perhaps A is a module name)
         or else A has a record type and B names a record field.
         The run-time system must decide; the grammar cannot. </comment><rule mark="-" name="single-ident"><alt><nonterminal mark="@" name="ident"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="double-ident"><alt><nonterminal mark="@" name="left"/><nonterminal name="DOT"/><nonterminal mark="@" name="right"/></alt></rule><rule mark="@" name="left"><alt><nonterminal name="_ident_"/></alt></rule><comment> qualifier? or local ident? </comment><rule mark="@" name="right"><alt><nonterminal name="_ident_"/></alt></rule><comment> local ident? or field name? </comment><rule mark="-" name="selector"><alt><nonterminal name="field-ref"/></alt><alt><nonterminal mark="-" name="non-field-selector"/></alt></rule><rule mark="-" name="non-field-selector"><alt><nonterminal name="subscript"/></alt><alt><nonterminal name="UP"/></alt><alt><nonterminal name="typeguard"/><alts><alt><nonterminal name="field-ref"/></alt><alt><nonterminal name="UP"/></alt></alts></alt></rule><rule name="field-ref"><alt><nonterminal name="DOT"/><nonterminal mark="@" name="ident"/><option><nonterminal name="s"/></option></alt></rule><rule name="subscript"><alt><nonterminal name="LBRKT"/><nonterminal name="ExpList"/><nonterminal name="RBRKT"/></alt></rule><rule name="typeguard"><alt><nonterminal name="LPAR"/><nonterminal name="qualident"/><nonterminal name="RPAR"/></alt></rule><rule name="set"><alt><nonterminal name="LBRACE"/><repeat0><nonterminal name="element"/><sep><nonterminal name="COMMA"/></sep></repeat0><nonterminal name="RBRACE"/></alt></rule><rule name="element"><alt><nonterminal name="_expression_"/><option><alts><alt><nonterminal name="DOTDOT"/><nonterminal name="_expression_"/></alt></alts></option></alt></rule><rule mark="-" name="ExpList"><alt><repeat1><nonterminal name="_expression_"/><sep><nonterminal name="COMMA"/></sep></repeat1></alt></rule><rule name="ActualParameters"><alt><nonterminal name="LPAR"/><option><nonterminal name="ExpList"/></option><nonterminal name="RPAR"/></alt></rule><rule mark="-" name="statement"><alt><option><alts><alt><nonterminal name="assignment"/></alt><alt><nonterminal name="ProcedureCall"/></alt><alt><nonterminal name="IfStatement"/></alt><alt><nonterminal name="CaseStatement"/></alt><alt><nonterminal name="WhileStatement"/></alt><alt><nonterminal name="RepeatStatement"/></alt><alt><nonterminal name="ForStatement"/></alt></alts></option></alt></rule><rule name="assignment"><alt><nonterminal name="designator"/><nonterminal name="GETS"/><nonterminal name="_expression_"/></alt></rule><rule name="ProcedureCall"><alt><nonterminal name="designator"/><option><nonterminal name="ActualParameters"/></option></alt></rule><rule name="StatementSequence"><alt><repeat1><nonterminal name="statement"/><sep><nonterminal name="SEMI"/></sep></repeat1></alt></rule><rule name="IfStatement"><alt><nonterminal name="IF"/><nonterminal name="Condition"/><nonterminal name="THEN"/><nonterminal name="Then-Statements"/><repeat0><alts><alt><nonterminal name="ELSIF"/><nonterminal name="Condition"/><nonterminal name="THEN"/><nonterminal name="Then-Statements"/></alt></alts></repeat0><option><alts><alt><nonterminal name="ELSE"/><nonterminal name="Else-Statements"/></alt></alts></option><nonterminal name="END"/></alt></rule><rule name="Condition"><alt><nonterminal mark="-" name="_expression_"/></alt></rule><rule name="Then-Statements"><alt><nonterminal mark="-" name="StatementSequence"/></alt></rule><rule name="Else-Statements"><alt><nonterminal mark="-" name="StatementSequence"/></alt></rule><rule name="CaseStatement"><alt><nonterminal name="CASE"/><nonterminal name="_expression_"/><nonterminal name="OF"/><repeat1><nonterminal name="Case"/><sep><nonterminal name="VBAR"/></sep></repeat1><nonterminal name="END"/></alt></rule><rule name="Case"><alt><nonterminal name="CaseLabelList"/><nonterminal name="COLON"/><nonterminal name="Then-Statements"/></alt></rule><rule name="CaseLabelList"><alt><repeat1><nonterminal name="LabelRange"/><sep><nonterminal name="COMMA"/></sep></repeat1></alt></rule><rule name="LabelRange"><alt><nonterminal name="label"/><option><alts><alt><nonterminal name="DOTDOT"/><nonterminal name="label"/></alt></alts></option></alt></rule><rule name="label"><alt><nonterminal name="_integer_"/></alt><alt><nonterminal name="_string_"/></alt><alt><nonterminal name="_ident_"/></alt></rule><rule name="WhileStatement"><alt><nonterminal name="WHILE"/><nonterminal name="Condition"/><nonterminal name="DO"/><nonterminal name="Do-Statements"/><repeat0><alts><alt><nonterminal name="ELSIF"/><nonterminal name="Condition"/><nonterminal name="DO"/><nonterminal name="Then-Statements"/></alt></alts></repeat0><nonterminal name="END"/></alt></rule><rule name="Do-Statements"><alt><nonterminal name="StatementSequence"/></alt></rule><rule name="RepeatStatement"><alt><nonterminal name="REPEAT"/><nonterminal name="StatementSequence"/><nonterminal name="UNTIL"/><nonterminal name="Condition"/></alt></rule><rule name="ForStatement"><alt><nonterminal name="FOR"/><nonterminal name="_ident_"/><nonterminal name="GETS"/><nonterminal name="_expression_"/><nonterminal name="TO"/><nonterminal name="_expression_"/><option><alts><alt><nonterminal name="BY"/><nonterminal mark="^" name="ConstExpression"/></alt></alts></option><nonterminal name="DO"/><nonterminal name="StatementSequence"/><nonterminal name="END"/></alt></rule><rule name="ProcedureDeclaration"><alt><nonterminal name="ProcedureHeading"/><nonterminal name="SEMI"/><nonterminal name="ProcedureBody"/><nonterminal name="_ident_"/></alt></rule><rule name="ProcedureHeading"><alt><nonterminal name="PROCEDURE"/><nonterminal name="identdef"/><option><alts><alt><nonterminal name="FormalParameters"/></alt></alts></option></alt></rule><rule name="ProcedureBody"><alt><nonterminal name="DeclarationSequence"/><option><alts><alt><nonterminal name="BEGIN"/><nonterminal name="StatementSequence"/></alt></alts></option><option><alts><alt><nonterminal name="RETURN"/><nonterminal name="_expression_"/></alt></alts></option><nonterminal name="END"/></alt></rule><rule name="DeclarationSequence"><alt><option><alts><alt><nonterminal name="CONST"/><repeat0><alts><alt><nonterminal name="ConstDeclaration"/><nonterminal name="SEMI"/></alt></alts></repeat0></alt></alts></option><option><alts><alt><nonterminal name="TYPE"/><repeat0><alts><alt><nonterminal name="TypeDeclaration"/><nonterminal name="SEMI"/></alt></alts></repeat0></alt></alts></option><option><alts><alt><nonterminal name="VAR"/><repeat0><alts><alt><nonterminal name="VariableDeclaration"/><nonterminal name="SEMI"/></alt></alts></repeat0></alt></alts></option><repeat0><alts><alt><nonterminal name="ProcedureDeclaration"/><nonterminal name="SEMI"/></alt></alts></repeat0></alt></rule><rule name="FormalParameters"><alt><nonterminal name="LPAR"/><repeat0><nonterminal name="FPSection"/><sep><nonterminal name="SEMI"/></sep></repeat0><nonterminal name="RPAR"/><option><alts><alt><nonterminal name="COLON"/><nonterminal name="qualident"/></alt></alts></option></alt></rule><rule name="FPSection"><alt><option><alts><alt><nonterminal name="CONST"/></alt><alt><nonterminal name="VAR"/></alt></alts></option><repeat1><nonterminal name="_ident_"/><sep><nonterminal name="COMMA"/></sep></repeat1><nonterminal name="COLON"/><nonterminal name="FormalType"/></alt></rule><rule name="FormalType"><alt><option><alts><alt><nonterminal name="ARRAY"/><nonterminal name="OF"/></alt></alts></option><nonterminal name="qualident"/></alt></rule><rule name="ImportList"><alt><nonterminal name="IMPORT"/><repeat1><nonterminal name="import"/><sep><nonterminal name="COMMA"/></sep></repeat1><nonterminal name="SEMI"/></alt></rule><rule name="import"><alt><nonterminal name="_ident_"/><option><alts><alt><nonterminal name="GETS"/><nonterminal name="_ident_"/></alt></alts></option></alt></rule><comment>*  Rules added in translation, to simplify whitespace handling *</comment><rule mark="-" name="s"><alt><repeat1><alts><alt><inclusion tmark="-"><member code="Zs"/><member hex="9"/><member hex="A"/><member hex="D"/></inclusion></alt><alt><nonterminal name="comment"/></alt></alts></repeat1></alt></rule><rule name="comment"><alt><literal tmark="-" string="(*"/><nonterminal name="comment-body"/><literal tmark="-" string="*)"/></alt></rule><rule name="comment-body"><alt><nonterminal name="comment-chars"/><option><alts><alt><alts><alt><repeat1><nonterminal name="comment"/><sep><nonterminal name="comment-chars"/></sep></repeat1></alt></alts><option><nonterminal name="comment-chars"/></option></alt></alts></option></alt></rule><rule mark="-" name="comment-chars"><alt><repeat1><alts><alt><nonterminal name="cc1"/></alt><alt><nonterminal name="cc2"/></alt><alt><nonterminal name="cc3"/></alt></alts></repeat1><repeat0><nonterminal name="star"/></repeat0><repeat0><nonterminal name="lpar"/></repeat0></alt><alt><repeat1><nonterminal name="star"/></repeat1><repeat0><nonterminal name="lpar"/></repeat0></alt><alt><repeat1><nonterminal name="lpar"/></repeat1></alt></rule><rule mark="-" name="cc1"><alt><nonterminal name="not-star-or-lpar"/></alt></rule><rule mark="-" name="cc2"><alt><repeat1><nonterminal name="lpar"/></repeat1><nonterminal name="not-star-or-lpar"/></alt></rule><rule mark="-" name="cc3"><alt><repeat1><nonterminal name="star"/></repeat1><repeat1><nonterminal name="lpar"/></repeat1><nonterminal name="not-star-or-lpar"/></alt><alt><repeat1><nonterminal name="star"/></repeat1><nonterminal name="not-star-or-lrpar"/></alt></rule><rule mark="-" name="not-star-or-lpar"><alt><exclusion><member string="*("/></exclusion></alt></rule><rule mark="-" name="not-star-or-lrpar"><alt><exclusion><member string="(*)"/></exclusion></alt></rule><rule mark="-" name="lpar"><alt><literal string="("/></alt></rule><rule mark="-" name="star"><alt><literal string="*"/></alt></rule><comment>*  Rules added in translation, to fill gaps *</comment><rule name="character"><alt><exclusion><member string="&quot;"/></exclusion></alt></rule><rule name="letter"><alt><inclusion><member code="L"/></inclusion></alt></rule><comment>* Operators (not hidden) *</comment><comment> Relations (on simple expressions) </comment><rule name="EQL"><alt><literal tmark="-" string="="/><option><nonterminal name="s"/></option></alt></rule><rule name="NEQ"><alt><literal tmark="-" string="#"/><option><nonterminal name="s"/></option></alt></rule><rule name="LSS"><alt><literal tmark="-" string="&lt;"/><option><nonterminal name="s"/></option></alt></rule><rule name="LEQ"><alt><literal tmark="-" string="&lt;="/><option><nonterminal name="s"/></option></alt></rule><rule name="GTR"><alt><literal tmark="-" string="&gt;"/><option><nonterminal name="s"/></option></alt></rule><rule name="GEQ"><alt><literal tmark="-" string="&gt;="/><option><nonterminal name="s"/></option></alt></rule><rule name="IN"><alt><literal tmark="-" string="IN"/><nonterminal name="s"/></alt></rule><rule name="IS"><alt><literal tmark="-" string="IS"/><nonterminal name="s"/></alt></rule><comment> Arithmetic and logic operators </comment><rule name="PLUS"><alt><literal tmark="-" string="+"/><option><nonterminal name="s"/></option></alt></rule><rule name="MINUS"><alt><literal tmark="-" string="-"/><option><nonterminal name="s"/></option></alt></rule><rule name="OR"><alt><literal tmark="-" string="OR"/><option><nonterminal name="s"/></option></alt></rule><rule name="MUL"><alt><literal tmark="-" string="*"/><option><nonterminal name="s"/></option></alt></rule><rule name="SLASH"><alt><literal tmark="-" string="/"/><option><nonterminal name="s"/></option></alt></rule><rule name="DIV"><alt><literal tmark="-" string="DIV"/><option><nonterminal name="s"/></option></alt></rule><rule name="MOD"><alt><literal tmark="-" string="MOD"/><option><nonterminal name="s"/></option></alt></rule><rule name="AND"><alt><literal tmark="-" string="&amp;"/><option><nonterminal name="s"/></option></alt></rule><rule name="NEGATION"><alt><literal tmark="-" string="~"/><option><nonterminal name="s"/></option></alt></rule><comment> Other operators, non-redundant keywords </comment><rule name="UP"><alt><literal tmark="-" string="^"/><option><nonterminal name="s"/></option></alt></rule><rule name="RETURN"><alt><literal tmark="-" string="RETURN"/><option><nonterminal name="s"/></option></alt></rule><rule name="TRUE"><alt><literal tmark="-" string="TRUE"/><option><nonterminal name="s"/></option></alt></rule><rule name="FALSE"><alt><literal tmark="-" string="FALSE"/><option><nonterminal name="s"/></option></alt></rule><rule name="NIL"><alt><literal tmark="-" string="NIL"/><option><nonterminal name="s"/></option></alt></rule><comment> HEXMARK and STAR are handled specially. Literal value
  is retained, nonterminal is hidden.  And for HEXMARK,
  no trailing space. </comment><rule mark="-" name="STAR"><alt><literal string="*"/><option><nonterminal name="s"/><comment> when not used as multiplication operator </comment></option></alt></rule><rule mark="-" name="HEXMARK"><alt><literal string="X"/></alt></rule><comment>* Delimiters (hidden) *</comment><rule mark="-" name="LPAR"><alt><literal tmark="-" string="("/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="RPAR"><alt><literal tmark="-" string=")"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="COMMA"><alt><literal tmark="-" string=","/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="DOT"><alt><literal tmark="-" string="."/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="DOTDOT"><alt><literal tmark="-" string=".."/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="COLON"><alt><literal tmark="-" string=":"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="GETS"><alt><literal tmark="-" string=":="/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="SEMI"><alt><literal tmark="-" string=";"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="EQUALS"><alt><literal tmark="-" string="="/><option><nonterminal name="s"/><comment> distinct from EQL operator </comment></option></alt></rule><rule mark="-" name="LBRKT"><alt><literal tmark="-" string="["/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="RBRKT"><alt><literal tmark="-" string="]"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="LBRACE"><alt><literal tmark="-" string="{"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="VBAR"><alt><literal tmark="-" string="|"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="RBRACE"><alt><literal tmark="-" string="}"/><option><nonterminal name="s"/></option></alt></rule><comment>* Keywords *</comment><rule mark="-" name="ARRAY"><alt><literal tmark="-" string="ARRAY"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="BEGIN"><alt><literal tmark="-" string="BEGIN"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="BY"><alt><literal tmark="-" string="BY"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="CASE"><alt><literal tmark="-" string="CASE"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="CONST"><alt><literal tmark="-" string="CONST"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="DO"><alt><literal tmark="-" string="DO"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="ELSE"><alt><literal tmark="-" string="ELSE"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="ELSIF"><alt><literal tmark="-" string="ELSIF"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="END"><alt><literal tmark="-" string="END"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="FOR"><alt><literal tmark="-" string="FOR"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="IF"><alt><literal tmark="-" string="IF"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="IMPORT"><alt><literal tmark="-" string="IMPORT"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="MODULE"><alt><literal tmark="-" string="MODULE"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="OF"><alt><literal tmark="-" string="OF"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="POINTER"><alt><literal tmark="-" string="POINTER"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="PROCEDURE"><alt><literal tmark="-" string="PROCEDURE"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="RECORD"><alt><literal tmark="-" string="RECORD"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="REPEAT"><alt><literal tmark="-" string="REPEAT"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="THEN"><alt><literal tmark="-" string="THEN"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="TO"><alt><literal tmark="-" string="TO"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="TYPE"><alt><literal tmark="-" string="TYPE"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="UNTIL"><alt><literal tmark="-" string="UNTIL"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="VAR"><alt><literal tmark="-" string="VAR"/><option><nonterminal name="s"/></option></alt></rule><rule mark="-" name="WHILE"><alt><literal tmark="-" string="WHILE"/><option><nonterminal name="s"/></option></alt></rule></ixml>