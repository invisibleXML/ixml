ixml: S, rule+.
rule: mark?, name, ["=:"], S, -alts, ".", S.
alts: alt++([";|"], S).
alt: term**(",", S).
-term: factor;
       repeat0;
       repeat1;
       option.
repeat0: factor, "*", S, sep?.
repeat1: factor, "+", S, sep?.
option:  factor, "?", S.
sep:     factor.

-factor: nonterminal;
         terminal;
         "(", S, alts, ")", S.
nonterminal: mark?, name.
-terminal: literal; charset.
-literal: quoted; encoded.
-charset: inclusion; exclusion.

quoted: tmark?, -string.
encoded: tmark?, @hex.
inclusion: tmark?, "[", S,  element++([";|"], S), "]", S.
exclusion: tmark?, "~", S, "[", S,  element++([";|"], S), "]", S.

@tmark: ["^-"], S.
-element: range;
          string;
          hex;
          class.
range: from, "-", S, to.
@from: character.
@to: character.
-character: -'"', dchar, -'"', S;
            -"'", schar, -"'", S;
            hex.
class: letter, letter, S. {One of the Unicode character classes}
-letter: ["a"-"z"; "A"-"Z"].
@name: letgit, xletter*, S.
-letgit: ["a"{first}-"z"; "A"-"Z"; "0"-"9"].
-xletter: letgit; "-".

@mark: ["@^-"], S.

string: -'"', dstring, -'"', S;
        -"'", sstring, -"'", S.
@dstring: dchar+.
@sstring: schar+.
dchar: ~['"'];
       '""'. {all characters, dquotes must be doubled}
schar: ~["'"];
       "''". {all characters, squotes must be doubled}
hex: "#", ["0"-"9"; "a"-"f"; "A"-"F"]+, S.

-S: (" "; -#a; -#d; #9; comment)*.
comment: "{", cchar*, "}".
-cchar: ~["}"].

{the end}
