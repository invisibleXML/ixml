{ Sample grammar from Niklaus Wirth, Grundlagen und Techniken des
Compilerbaus (Bonn: Addison-Wesley, 1996), pp. 36-37.

Oberon-0.

Rules for ws added for convenience; Wirth assumes the lexer
eats whitespace. }

{ Revisions:
  2022-06-15 : CMSMcQ : tweaks to align output with grammar 41bis
  2022-06-14 : CMSMcQ : revise S handling (tight tags, where possible).
                        Hide most literals, use pre-terminal symbols.
  2018-08-10 : CMSMcQ : correct syntax errors found by DCG parser
  2018-08-09 : CMSMcQ : made first transcription; needs testing, since
      the translation from Wirth's EBNF is error-prone.
}

{ We move the rule for module to the front, since it is the
start symbol. }

            module = S?, -"MODULE", S, @ident, SEMI,
                     declarations,
                     (-"BEGIN", StatementSequence)?,
                     -"END", S, @ident_close, S?, -".", S?.
    
             ident = letter, (letter; digit)*.
       ident_close = ident.
           integer = digit, (digit)*.
          selector = (member; subscript)++(S?).
	    member = -".", S?, ident.
	 subscript = -"[", S?, expression, S?, -"]".
         {selector = (".", S?, ident; "[", S?, expression, S?, "]")++S.}
            number = integer.
            factor = ident, (S?, selector)?
	           ; number
		   ; -"(", S?, expression, S?, -")"
		   ; "~", S?, factor
		   .
              term = factor++(S?, (TIMES; DIV; MOD; AND), S?).
	      
  SimpleExpression =  (PLUS; MINUS)?, term++(S?, (PLUS; MINUS; OR), S?).

    { N.B. Simplexpression allows 1, -1, 1 + 1,
      -1 + 1, but not 1 + -1.
      I expect that's intentional.
      I've made it also forbid white space between sign and term.
    }    
 
        expression = SimpleExpression, (S?, -COMPARATOR, S?, SimpleExpression)?.
       -COMPARATOR = EQL; NEQ; LSS; LEQ; GTR; GEQ.
        assignment = ident, S?, (selector, S?)?, -":=", S?, expression.
  ActualParameters = -"(", S?, expression**(S?, -",", S?), S?, -")".
     ProcedureCall = ident, (S?, selector)?, (S?, ActualParameters)?.
       IfStatement = -"IF", S?, condition, S?, 
                     -"THEN", then-stmts,
                     (-"ELSIF", S?, condition, S?, 
		     -"THEN", then-stmts)*,
                     (-"ELSE", else-stmts)?,
		     -"END".
         condition = -expression.
        then-stmts = -StatementSequence.
        else-stmts = -StatementSequence.
    WhileStatement = -"WHILE", S?, condition, S?,
                     -"DO", do-statements,
		     -"END".
     do-statements = -StatementSequence.

         statement = S?, ((assignment
			 ; ProcedureCall
			 ; IfStatement
			 ; WhileStatement), S?)?.
 StatementSequence = statement++ -";".
 
 { Wirth's formulation is closer to the following, but that complicates whitespace
   handling. 

         statement = (assignment; ProcedureCall; IfStatement; WhileStatement)?.
 StatementSequence = statement++SEMI.
 }

         IdentList = ident++(-",", S?).
         ArrayType = -"ARRAY", S?, expression, S?, -"OF", S?, type.
         FieldList = (IdentList, COLON, type)?.
        RecordType = -"RECORD", S?, FieldList++SEMI, S?, -"END", S?.
              type = ident
	           ; ArrayType
		   ; RecordType
		   .
         FPSection = (-"VAR", S)?, IdentList, COLON, type.
  FormalParameters = -"(", S?, FPSection**SEMI, S?, -")".
  ProcedureHeading = -"PROCEDURE", S, ident, S?, FormalParameters?.
     ProcedureBody = declarations, 
                     (-"BEGIN", StatementSequence)?,
		     -"END", S, @ident.
ProcedureDeclaration
                   = ProcedureHeading, SEMI, ProcedureBody.
      declarations = (constants, S?)?, (types, S?)?, (variables, S?)?, (procedures, S?)?.
         constants = -"CONST", (S, (ident, EQUALS, expression, S?, -";")++S)?.
             types = -"TYPE", (S, (IdentList, EQUALS, type, S?, -";")++S)?.
         variables = -"VAR", (S, (IdentList, COLON, type, S?, -";")++S)?.
        procedures = (ProcedureDeclaration, S?, -";")++S.

{ S and comment added here to make the grammar usable without
  a scanner. N.B. Comments nest. }
                -S = (ws; comment)+.
               -ws = -[" "; #09; #0A; #0D].

           comment = -"(*", comment-body, -"*)".
      comment-body = comment-chars, ((comment++comment-chars), comment-chars?)?.
    -comment-chars = (cc1; cc2; cc3)+, star*, lpar* | star+, lpar* | lpar+.
              -cc1 = not-star-or-lpar.
              -cc2 = lpar+, not-star-or-lpar.
	      -cc3 = star+, lpar+, not-star-or-lpar
                   | star+, not-star-or-lrpar.
 -not-star-or-lpar = ~["*("].
-not-star-or-lrpar = ~["(*)"].
             -lpar = "(".
	     -star = "*".

            -digit = ['0'-'9'].
           -letter = ['a'-'z'; 'A'-'Z'].

             TIMES = -"*".
	       DIV = -"DIV".
	       MOD = -"MOD".
	       AND = -"AND".
	      PLUS = -"+".
	     MINUS = -"-".
	        OR = -"OR".
               EQL = -"=".
	       NEQ = -"#".
	       LSS = -"<".
	       LEQ = -"<=".
	       GTR = -">".
	       GEQ = -">=".

{ Separators }
             -SEMI = S?, -";", S?.
            -COLON = S?, -":", S?.
           -EQUALS = S?, -"=", S?.