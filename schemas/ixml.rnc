namespace d2x = "http://www.blackmesatech.com/2014/lib/d2x"
namespace follow =
  "http://blackmesatech.com/2016/nss/ixml-gluschkov-automata-followset"
namespace gl = "http://blackmesatech.com/2019/iXML/Gluschkov"
namespace gt = "http://blackmesatech.com/2020/grammartools"
namespace local = ""
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace rtn =
  "http://blackmesatech.com/2020/iXML/recursive-transition-networks"
namespace xs = "http://www.w3.org/2001/XMLSchema"

start = ixml
ixml = e.ixml
e.ixml =
  element ixml {
    extension-attributes,
    (extension-elements
     & (s,
        (rule, (RS, rule)*),
        s))
  }
s = h.s
h.s = (whitespace | comment)*
RS = h.RS
h.RS = (whitespace | comment)+
whitespace = h.whitespace
h.whitespace =
  # alt with no realized children
  empty
  | tab
  | lf
  | cr
tab = h.tab
h.tab =
  # alt with no realized children
  empty
lf = h.lf
h.lf =
  # alt with no realized children
  empty
cr = h.cr
h.cr =
  # alt with no realized children
  empty
comment = e.comment
e.comment =
  element comment {
    extension-attributes,
    (extension-elements & (cchar | comment)*)
  }
cchar = h.cchar
h.cchar =
  # can a data element be used?
  text
rule = e.rule
e.rule =
  element rule {
    extension-attributes,
    (extension-elements
     & ((mark, s)?, name, s, s, h.alts))
  }
mark = a.mark
a.mark =
  attribute mark {
    xsd:string { pattern = "[@\^\-]" }
  }
alts = e.alts
e.alts =
  element alts {
    extension-attributes,
    (extension-elements
     & (alt, (s, alt)*))
  }
h.alts = alt, (s, alt)*
alt = e.alt
e.alt =
  element alt {
    extension-attributes,
    (extension-elements
     & (term, (s, term)*)?)
  }
term = h.term
h.term = factor | option | repeat0 | repeat1
factor = h.factor
h.factor = terminal | nonterminal | (s, alts, s)
repeat0 = e.repeat0
e.repeat0 =
  element repeat0 {
    extension-attributes,
    (extension-elements
     & (factor,
        (s | (s, sep))))
  }
repeat1 = e.repeat1
e.repeat1 =
  element repeat1 {
    extension-attributes,
    (extension-elements
     & (factor,
        (s | (s, sep))))
  }
option = e.option
e.option =
  element option {
    extension-attributes,
    (extension-elements & (factor, s))
  }
sep = e.sep
e.sep =
  element sep { extension-attributes, (extension-elements & factor) }
nonterminal = e.nonterminal
e.nonterminal =
  element nonterminal {
    extension-attributes,
    (extension-elements
     & ((mark, s)?, name, s))
  }
name = a.name
a.name =
  attribute name {
    xsd:string {
      pattern = "([_\p{L}])((([_\p{L}]))|([\-.·‿⁀\p{Nd}\p{Mn}]))*"
    }
  }
namestart = h.namestart
h.namestart =
  # can a data element be used?
  text
namefollower = h.namefollower
h.namefollower =
  namestart
  | # can a data element be used?
    text
terminal = h.terminal
h.terminal = literal | charset
literal = e.literal
e.literal =
  element literal {
    extension-attributes,
    (extension-elements & (quoted | encoded))
  }
quoted = h.quoted
h.quoted = (tmark, s)?, \string, s
tmark = a.tmark
a.tmark =
  attribute tmark {
    xsd:string { pattern = "[\^\-+]" }
  }
\string = a.string
a.string =
  attribute string {
    xsd:string {
      pattern = """((([^"\x{d}])|("))+)|((([^'\x{d}])|('))+)"""
    }
  }
dchar = h.dchar
h.dchar =
  # can a data element be used?
  text
  | # can a data element be used?
    text
schar = h.schar
h.schar =
  # can a data element be used?
  text
  | # can a data element be used?
    text
encoded = h.encoded
h.encoded = (tmark, s)?, hex, s
hex = a.hex
a.hex =
  attribute hex {
    xsd:string { pattern = "[0-9a-fA-F]+" }
  }
charset = h.charset
h.charset = inclusion | exclusion
inclusion = e.inclusion
e.inclusion =
  element inclusion {
    extension-attributes,
    (extension-elements
     & ((tmark, s)?, set))
  }
exclusion = e.exclusion
e.exclusion =
  element exclusion {
    extension-attributes,
    (extension-elements
     & ((tmark, s)?, s, set))
  }
set = h.set
h.set =
  s,
  ((member, s),
   (s, (member, s))*)?,
  s
member = e.member
e.member =
  element member {
    extension-attributes,
    (extension-elements & (\string | hex | range | class))
  }
range = h.range
h.range = from, s, s, to
from = a.from
a.from =
  attribute from {
    xsd:string {
      pattern =
        """(((([^"\x{d}])|(")))|((([^'\x{d}])|(')))|(#([0-9a-fA-F]+)))"""
    }
  }
to = a.to
a.to =
  attribute to {
    xsd:string {
      pattern =
        """(((([^"\x{d}])|(")))|((([^'\x{d}])|(')))|(#([0-9a-fA-F]+)))"""
    }
  }
character = h.character
h.character =
  dchar
  | schar
  | (# can a data element be used?
     text,
     hex)
class = h.class
h.class = code
code = a.code
a.code =
  attribute code {
    xsd:string { pattern = "([A-Z])([a-z])?" }
  }
capital = h.capital
h.capital =
  # can a data element be used?
  text
letter = h.letter
h.letter =
  # can a data element be used?
  text
extension-attributes = nsq-att*
nsq-att = attribute * - local:* { text }
extension-elements = nsq-element*
nsq-element = element * - local:* { anything }
anything = (any-element | any-attribute | text)*
any-element = element * { anything }
any-attribute = attribute * { text }
